worker_processes 1; # specifies the no. of worker processes that processes the HTTP requests.

events {
    worker_connections 1024; # one worker process will be able to server 1024 clients
}

http {
    include mime.types; # includes the file types in response header while sending it back to the client

    upstream nodejs_cluster { # upstream servers or node servers where our App runs
        least_conn; # defines the load-balancing algorithm to Least-connection Algo, instead of default Round Robin
        server host.docker.internal:3001; # host.docker.internal for host IP (inside docker container)
        server host.docker.internal:3002;
        server host.docker.internal:3003;
    }

    # HTTPS server logic
    server {
        listen 443 ssl; # Port on which NGINX accepts requests (SSL certified HTTPS port)
        server_name localhost; # Domain where requests are proxied

        # SSL configs
        ssl_certificate /etc/nginx/certs/nginx-selfsigned.crt;
        ssl_certificate_key /etc/nginx/certs/nginx-selfsigned.key;

        location / { # root url
            proxy_pass http://nodejs_cluster; # Configuring NGINX server to be specifically a proxy server --> This serves a security layer to shield the backend servers from direct public access, proxying all public requests to them.
            proxy_set_header Host $host; # forwards the original url request (like /auth, /products, etc.) to the backend to avail specific backend features
            proxy_set_header X-Real-IP $remote_addr; # forwards the real IP Address to the backend server
        }
    }

    # HTTP Server logic
    server {
        listen 8080;
        server_name localhost;

        location / {
            return 301 https://$host$request_uri; # Redirecting response (301) --> redirected to our secure https server
        }
    }
}